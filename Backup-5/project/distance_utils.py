import cv2
import mediapipe as mp
import time
import requests
import threading
from datetime import datetime

class DistanceCamera:
    def __init__(self, cam_id=0, focal_length=840, real_eye_distance=6.3, safe_distance=50):
        """
        Kh·ªüi t·∫°o camera ƒëo kho·∫£ng c√°ch
        
        Args:
            cam_id: ID c·ªßa camera (m·∫∑c ƒë·ªãnh 0)
            focal_length: Ti√™u c·ª± ·∫£o c·ªßa camera
            real_eye_distance: Kho·∫£ng c√°ch th·ª±c gi·ªØa hai m·∫Øt (cm)
            safe_distance: Kho·∫£ng c√°ch an to√†n t·ªëi thi·ªÉu (cm)
        """
        self.cam_id = cam_id
        self.focal_length = focal_length
        self.real_eye_distance = real_eye_distance
        self.safe_distance = safe_distance
        
        # Kh·ªüi t·∫°o Face Mesh t·ª´ Mediapipe
        self.mp_face_mesh = mp.solutions.face_mesh
        self.face_mesh = self.mp_face_mesh.FaceMesh(
            static_image_mode=False, 
            max_num_faces=1,
            min_detection_confidence=0.7,
            min_tracking_confidence=0.5
        )
        
        # Kh·ªüi t·∫°o camera
        self.cap = None
        self.is_monitoring = False
        self.monitoring_thread = None
        self.last_distance = 0
        
    def start_camera(self):
        """Kh·ªüi ƒë·ªông camera"""
        if self.cap is None or not self.cap.isOpened():
            self.cap = cv2.VideoCapture(self.cam_id)
            if not self.cap.isOpened():
                raise Exception(f"Kh√¥ng th·ªÉ m·ªü camera {self.cam_id}")
        return True
    
    def stop_camera(self):
        """D·ª´ng camera"""
        if self.cap is not None:
            self.cap.release()
            self.cap = None
    
    def get_distance(self):
        """
        ƒêo kho·∫£ng c√°ch m·ªôt l·∫ßn
        
        Returns:
            tuple: (distance_cm, success)
        """
        if not self.start_camera():
            return 0, False
        
        ret, frame = self.cap.read()
        if not ret:
            return 0, False
        
        h, w, _ = frame.shape
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = self.face_mesh.process(rgb_frame)
        
        if results.multi_face_landmarks:
            for face in results.multi_face_landmarks:
                # M·∫Øt tr√°i: landmark 33, m·∫Øt ph·∫£i: 263
                left_eye = face.landmark[33]
                right_eye = face.landmark[263]
                
                x1 = int(left_eye.x * w)
                y1 = int(left_eye.y * h)
                x2 = int(right_eye.x * w)
                y2 = int(right_eye.y * h)
                
                # T√≠nh kho·∫£ng c√°ch pixel gi·ªØa 2 m·∫Øt
                pixel_distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
                
                if pixel_distance > 0:
                    distance_cm = (self.real_eye_distance * self.focal_length) / pixel_distance
                    self.last_distance = distance_cm
                    return distance_cm, True
        
        return 0, False
    
    def is_too_close(self):
        """
        Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ng·ªìi qu√° g·∫ßn kh√¥ng
        
        Returns:
            tuple: (is_too_close, distance_cm)
        """
        distance, success = self.get_distance()
        if success and distance > 0:
            return distance < self.safe_distance, distance
        return False, 0
    
    def start_monitoring(self, server_url="http://localhost:5000", interval=5):
        """
        B·∫Øt ƒë·∫ßu gi√°m s√°t li√™n t·ª•c v√† g·ª≠i d·ªØ li·ªáu l√™n server
        
        Args:
            server_url: URL c·ªßa web server
            interval: Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn ƒëo (gi√¢y)
        """
        if self.is_monitoring:
            return False
        
        self.is_monitoring = True
        self.monitoring_thread = threading.Thread(
            target=self._monitoring_loop, 
            args=(server_url, interval)
        )
        self.monitoring_thread.daemon = True
        self.monitoring_thread.start()
        return True
    
    def stop_monitoring(self):
        """D·ª´ng gi√°m s√°t"""
        self.is_monitoring = False
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=2)
        self.stop_camera()
    
    def _monitoring_loop(self, server_url, interval):
        """V√≤ng l·∫∑p gi√°m s√°t ch·∫°y trong thread ri√™ng"""
        consecutive_warnings = 0
        
        while self.is_monitoring:
            try:
                too_close, distance = self.is_too_close()
                
                if distance > 0:
                    # G·ª≠i d·ªØ li·ªáu kho·∫£ng c√°ch l√™n server
                    self._send_distance_to_server(server_url, distance)
                    
                    # Ki·ªÉm tra c·∫£nh b√°o li√™n t·ª•c
                    if too_close:
                        consecutive_warnings += 1
                        print(f"‚ö†Ô∏è C·∫£nh b√°o: Kho·∫£ng c√°ch {distance:.1f}cm qu√° g·∫ßn! ({consecutive_warnings})")
                        
                        # G·ª≠i c·∫£nh b√°o break n·∫øu qu√° g·∫ßn li√™n t·ª•c
                        if consecutive_warnings >= 3:  # 3 l·∫ßn li√™n t·ª•c
                            self._send_break_warning_to_server(server_url)
                            consecutive_warnings = 0
                    else:
                        consecutive_warnings = 0
                        print(f"‚úÖ Kho·∫£ng c√°ch an to√†n: {distance:.1f}cm")
                
                time.sleep(interval)
                
            except Exception as e:
                print(f"‚ùå L·ªói trong qu√° tr√¨nh gi√°m s√°t: {e}")
                time.sleep(1)
    
    def _send_distance_to_server(self, server_url, distance):
        """G·ª≠i d·ªØ li·ªáu kho·∫£ng c√°ch l√™n server"""
        try:
            response = requests.post(
                f"{server_url}/add_distance",
                json={"distance": distance},
                timeout=5
            )
            if response.status_code == 200:
                print(f"üì§ ƒê√£ g·ª≠i kho·∫£ng c√°ch: {distance:.1f}cm")
            else:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i kho·∫£ng c√°ch: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server khi g·ª≠i kho·∫£ng c√°ch: {e}")
    
    def _send_break_warning_to_server(self, server_url):
        """G·ª≠i c·∫£nh b√°o ngh·ªâ gi·∫£i lao l√™n server"""
        try:
            response = requests.post(
                f"{server_url}/add_break_warning",
                timeout=5
            )
            if response.status_code == 200:
                print("üì§ ƒê√£ g·ª≠i c·∫£nh b√°o ngh·ªâ gi·∫£i lao")
            else:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i c·∫£nh b√°o: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server khi g·ª≠i c·∫£nh b√°o: {e}")
    
    def save_image_with_distance(self, save_path="./"):
        """L∆∞u ·∫£nh v·ªõi th√¥ng tin kho·∫£ng c√°ch"""
        if not self.start_camera():
            return False, "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera"
        
        ret, frame = self.cap.read()
        if not ret:
            return False, "Kh√¥ng th·ªÉ l·∫•y frame t·ª´ camera"
        
        h, w, _ = frame.shape
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = self.face_mesh.process(rgb_frame)
        
        if results.multi_face_landmarks:
            for face in results.multi_face_landmarks:
                left_eye = face.landmark[33]
                right_eye = face.landmark[263]
                
                x1 = int(left_eye.x * w)
                y1 = int(left_eye.y * h)
                x2 = int(right_eye.x * w)
                y2 = int(right_eye.y * h)
                
                pixel_distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
                
                if pixel_distance > 0:
                    distance_cm = (self.real_eye_distance * self.focal_length) / pixel_distance
                    
                    # Ghi th√¥ng tin l√™n ·∫£nh
                    color = (0, 255, 0) if distance_cm >= self.safe_distance else (0, 0, 255)
                    cv2.putText(frame, f"Distance: {distance_cm:.2f} cm", (30, 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
                    
                    # V·∫Ω m·∫Øt
                    cv2.circle(frame, (x1, y1), 5, (255, 0, 0), -1)
                    cv2.circle(frame, (x2, y2), 5, (0, 0, 255), -1)
                    cv2.line(frame, (x1, y1), (x2, y2), (255, 255, 0), 2)
                    
                    # L∆∞u ·∫£nh
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"{save_path}/distance_{timestamp}_{distance_cm:.1f}cm.jpg"
                    cv2.imwrite(filename, frame)
                    
                    return True, f"ƒê√£ l∆∞u ·∫£nh: {filename}"
        
        return False, "Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t"

# H√†m test ƒë·ªôc l·∫≠p
def test_distance_camera():
    """H√†m test camera ƒëo kho·∫£ng c√°ch"""
    camera = DistanceCamera()
    
    try:
        print("üé• B·∫Øt ƒë·∫ßu test camera...")
        
        for i in range(10):
            too_close, distance = camera.is_too_close()
            if distance > 0:
                status = "‚ö†Ô∏è QU√Å G·∫¶N" if too_close else "‚úÖ AN TO√ÄN"
                print(f"L·∫ßn {i+1}: {distance:.1f}cm - {status}")
            else:
                print(f"L·∫ßn {i+1}: Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t")
            
            time.sleep(1)
        
        # Test l∆∞u ·∫£nh
        success, message = camera.save_image_with_distance()
        print(f"L∆∞u ·∫£nh: {message}")
        
    finally:
        camera.stop_camera()
        print("üîö K·∫øt th√∫c test")

if __name__ == "__main__":
    test_distance_camera()